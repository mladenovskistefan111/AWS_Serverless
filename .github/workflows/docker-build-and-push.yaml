---
name: docker-build-and-push

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Super-Linter
        uses: github/super-linter@v5
        env:
          VALIDATE_ALL_CODEBASE: true
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get latest tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 || echo "0.0.0")
          echo "Latest tag is: $LATEST_TAG"

          # Increment the patch version
          IFS='.' read -r major minor patch <<< "$LATEST_TAG"
          new_tag="$major.$minor.$((patch + 1))"

          echo "new_tag=$new_tag" >> $GITHUB_ENV

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "refs/tags/${{ env.new_tag }}" >/dev/null 2>&1; then
            echo "Tag ${{ env.new_tag }} already exists. Exiting..."
            exit 1
          fi

      - name: Create and push new tag
        run: |
          git tag ${{ env.new_tag }}
          git push origin ${{ env.new_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image with Semantic Versioning
        id: docker_build
        run: |
          IMAGE_VERSION=${{ env.new_tag }}
          docker build -t mladenovskistefan/dotnet-todo:${IMAGE_VERSION} .

      - name: Push Docker image
        run: |
          IMAGE_VERSION=${{ env.new_tag }}
          docker push mladenovskistefan/dotnet-todo:${IMAGE_VERSION}

      - name: Output the new version
        run: echo "New version is ${{ env.new_tag }}"
